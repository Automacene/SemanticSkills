name: describeskill
description: "The skill of providing concise and accurate descriptions for prompt templates used in generating tasks and scenarios for an AI chatbot."
skill_class: semantic
skill: |
  context: You are a data entry assistant that is creating descriptions for prompt templates for an AI company. The descriptions will be used in a vector database in part of a system that pulls related skills into the AI for use.
  
  description_format: |
    In the description format, each skill and its corresponding arguments will be defined and described using 1 sentence that can be used as a reference by an AI or similarity search in a vector database. Describe the skill using the following structure:
    [description]
    skill_name = "The name of the skill."
    skill_description = "A 1 sentence description of the skill."
    output_name = "The name of the output/result generated by the skill."
    output_description = "A 1 sentence description of the output"
    output_uses = "A 1 sentence description of how the output can be used."
    output_type = "The type of output, such as raw test, list as a string, number as a string, json, toml, xml, etc. as mime types. Invented types are allowed."
    [[description.arguments]]
    argument_name = "The name of the argument."
    argument_identifier = "{{argument_name}}"
    argument_description = "A 1 sentence description of the argument."
    argument_sources = "A 1 sentence description of where the argument could come from."
    argument_type = "The expected type of the argument, such as string, number, list, etc. as mime types. Invented types are allowed."
  
  examples:
    - prompt: |
        Explain what you would like to happen in natural language.  This will generate the corresponding code.  It helps to provide a programming language.  
        Description: {{$input}}
    - description_TOML: |
        [description]
        skill_name = "CodeGenerator""
        skill_description = "The skill is the ability to generate code based on a natural language description of desired functionality, helping the user by providing the corresponding code."
        output_name = "code"
        output_description = "Generated code based on the user's natural language description."
        output_uses = "Can be used by developers to quickly convert natural language requirements into code."
        output_type = "text/string"
        [[description.arguments]]
        argument_name = "input"
        argument_identifier = "{{$input}}"
        argument_description = "The natural language description of the desired functionality."
        argument_sources = "Provided by the user or extracted from conversation/dialogue."
        argument_type = "text/string"
        [[description.arguments]]
        argument_name = "programming_language"
        argument_identifier = "{{$programming_language}}"
        argument_description = "The programming language in which the code should be generated."
        argument_sources = "Specified by the user or inferred from the context."
        argument_type = "text/string"
  
    - prompt: |
          [BANNED COMMANDS]
          FORMAT
          DISKPART
          PARTITION
          CREATE PARTITION
          FSUTIL
          [END]
      
          WRITE A DOS SCRIPT. End each script with an exit /b %ERRORLEVEL%
       
          NEVER USE BANNED COMMANDS. BANNED COMMANDS DO DAMAGE. YOU NEVER WANT TO DO DAMAGE. 
          INSTEAD ECHO "SORRY {{$firstName}}, I CAN'T DO THAT. "
      
          List all pdf files in current folder
          dir *.pdf
          exit /b %ERRORLEVEL%
      
          {{$input}}
    - description_TOML: |
        [description]
        skill_name = "DosCreator"
        skill_description = "The skill allows the AI assistant to create executable DOS scripts that can perform specific actions based on the provided instructions."
        output_name = "dos_code"
        output_description = "A fully executable dos script."
        output_uses = "To perform actions, retrieve information, or generate results based on the instructions given in the script on a windows based host."
        output_type = "text/string"
        [[description.arguments]]
        argument_name = "firstName"
        argument_identifier = "{{$firstName}}"
        argument_description = "The first name or identifier of the user interacting with the AI assistant."
        argument_sources = "The user's first name can be directly provided, inferred from previous interactions, or obtained from a user profile."
        argument_type = "text/string"
        [[description.arguments]]
        argument_name = "input"
        argument_identifier = "{{$input}}"
        argument_description = "The description of a task the DOS script must accomplish."
        argument_sources = "A list of instructions, commands, or descriptions about a task that can be converted into a DOS script."
        argument_type = "text/string"
  
  instructions: Your job is to create a toml description of the prompt template for the given format. For each one, be thoughtful in how you summarize and describe them. They should be descriptive enough for an LLM to understand how to use it and a VectorDatabase to generate enough similarity to tasks the AI is trying to complete.
  
  scenario:
    - prompt: |
      {{$undescribed_template}}
    - description_TOML: |
inputs:
  - name: input
    type: text
    description: "The template format used for generating tasks and scenarios."
    default: ""
    required: True
settings:
    max_tokens: 1000
    temperature: 0.9
    top_p: 0.0
    presence_penalty: 0.0
    frequency_penalty: 0.0
